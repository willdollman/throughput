#!/usr/bin/perl

use warnings;
use strict;

use File::Copy;
use File::Spec::Functions qw( catfile );
use List::Util qw( sum );
use Text::CSV;
use Time::HiRes qw( time );
use YAML qw( LoadFile );

# Load config
my $config = LoadFile('throughput-config.yaml');

# Get name of test run
my $test_name;
if ($config->{debug}) {
    $test_name = 'debug_test';
}
else {
    print "Enter test name: ";
    $test_name = <STDIN>;
    chomp $test_name;
}
chomp $test_name;
my $output_file = $test_name . ".csv";
print "Writing to '$output_file'\n";
if (-e $output_file) {
    die "Output file '$output_file' already exists - I won't overwrite it\n";
}

# Write header fields to file
# Not ideal, the run # should be automated
open(my $o_fh, ">:encoding(utf8)", "$output_file") or die "$output_file: $!";
my $csv = Text::CSV->new;
my $fields = [ 'location', 'run 1', 'run 2', 'run 3', 'average' ];
$csv->print($o_fh, $fields);
print $o_fh "\r\n";
close($o_fh);

# Compute approximate throughput
my $approx_throughput = get_throughput('10');
print "Approximate throughput is ", pretty_throughput($approx_throughput), "\n";

while (1) {
    $|++; # flush buffer immediately
    print "Enter location name: ";
    my $location = <STDIN>;
    chomp $location;

    # Run benchmark 3 times and average results
    my $runs = 3;
    my @throughputs;
    print "Throughputs for $location ($runs runs) are: ";
    for my $i (0..$runs-1) {
        $throughputs[$i] = get_throughput('100');
        print pretty_throughput($throughputs[$i]), " ";
    }
    my $average_throughput = sum(@throughputs) / $runs;
    print "\nAverage: ", pretty_throughput($average_throughput), "\n";

    # Write location, throughputs and average to a line in a csv file
    # This is not exactly the nicest way to do it
    open(my $o_fh, ">>:encoding(utf8)", "$output_file") or die "$output_file: $!";
    my $csv_entries = [
        $location,
        $throughputs[0],
        $throughputs[1],
        $throughputs[2],
        $average_throughput,
    ];
    $csv->print($o_fh, $csv_entries);
    print $o_fh "\r\n";
    close($o_fh);
}

### Start subroutines

# Copy a file to compute thoughput
sub get_throughput {
    my $size = shift;

    # Generate a 10mb file
    my $benchmark_filename = generate_file($size);

    # Copy file and time
    my $duration = copy_and_time($benchmark_filename);

    # Compute network speed
    my $throughput = compute_throughput($size, $duration);

    return $throughput;
}

# Generate a file of a given size (in megabytes)
# Files will eventually be pseudorandom to prevent compression
# Returns filename
sub generate_file {
    my $size = shift;

    my $filename = "$size.benchmark";

    return $filename if (-e $filename);
    print "File doesn't exist - creating\n" if $config->{verbose};

    open(my $fh, '>', $filename);
    # 1024 bytes in a kilobyte, 1024 kilobytes in a megabyte
    print $fh 'x' x (1024 * 1024 * $size);
    close($fh);

    return $filename;
}

# Clean up a given file by erasing it
sub remove_file {
    my $filename = shift;
}

# Takes a filename, and copies it to the destination
# Returns in the time taken to copy the file
sub copy_and_time {
    my $filename = shift;

    # Generate destination filename
    die "No 'dest_path' in config.yaml" unless $config->{dest_path};
    my $dest_filename = catfile($config->{dest_path}, $filename);

    # Check file exists
    if (! -e $filename) {
        warn "File '$filename' does not exist - skipping\n";
    }

    # Remove destination file if it exists?
    if (-e $dest_filename) {
        warn "Destination file already exists - removing\n" if $config->{verbose};
        unlink $dest_filename;
    }

    # Start timer
    my $start = time;

    # Copy file
    copy($filename, $dest_filename);

    # Stop timer
    my $end = time;
    my $duration = $end - $start;

    return $duration;
}

# Takes size in MegaBytes and time in seconds
# Returns throughput in MB/s
sub compute_throughput {
    my $size = shift;
    my $duration = shift;

    my $throughput = $size/$duration;

    return $throughput;
}

sub pretty_throughput {
    my $throughput = shift;

    return sprintf "%.2f MB/s", $throughput;
}
