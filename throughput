#!/usr/bin/perl

use warnings;
use strict;

use File::Copy;
use File::Spec::Functions qw( catfile );
use Time::HiRes qw( time );
use YAML qw( LoadFile );

# Load config
my $config = LoadFile('config.yaml');

# Get name of test run
my $test_name;
if ($config->{debug}) {
    $test_name = 'debug_test';
}
else {
    $test_name = <STDIN>;
    chomp $test_name;
}
chomp $test_name;
print "Running test '$test_name'\n";

# Compute approximate throughput
my $approx_throughput = get_throughput('10');
printf "Approximate throughput is %.2f MB/s\n", $approx_throughput;

my $throughput = get_throughput('100');
printf "Throughput is %.2f MB/s\n", $throughput;

### Start subroutines

# Copy a file to compute thoughput
sub get_throughput {
    my $size = shift;

    # Generate a 10mb file
    my $benchmark_filename = generate_file($size);

    # Copy file and time
    my $duration = copy_and_time($benchmark_filename);

    # Compute network speed
    my $throughput = compute_throughput($size, $duration);

    return $throughput;
}

# Generate a file of a given size (in megabytes)
# Files will eventually be pseudorandom to prevent compression
# Returns filename
sub generate_file {
    my $size = shift;

    my $filename = "$size.benchmark";

    return $filename if (-e $filename);
    print "File doesn't exist - creating\n";

    open(my $fh, '>', $filename);
    # 1024 bytes in a kilobyte, 1024 kilobytes in a megabyte
    print $fh 'x' x (1024 * 1024 * $size);
    close($fh);

    return $filename;
}

# Clean up a given file by erasing it
sub remove_file {
    my $filename = shift;
}

# Takes a filename, and copies it to the destination
# Returns in the time taken to copy the file
sub copy_and_time {
    my $filename = shift;

    # Generate destination filename
    die "No 'dest_path' in config.yaml" unless $config->{dest_path};
    my $dest_filename = catfile($config->{dest_path}, $filename);

    # Check file exists
    if (! -e $filename) {
        warn "File '$filename' does not exist - skipping\n";
    }

    # Remove destination file if it exists?
    if (-e $dest_filename) {
        warn "Destination file already exists - removing\n" if $config->{verbose};
        unlink $dest_filename;
    }

    # Start timer
    my $start = time;

    # Copy file
    copy($filename, $dest_filename);

    # Stop timer
    my $end = time;
    my $duration = $end - $start;

    return $duration;
}

# Takes size in MegaBytes and time in seconds
# Returns throughput in MB/s
sub compute_throughput {
    my $size = shift;
    my $duration = shift;

    my $throughput = $size/$duration;

    return $throughput;
}
